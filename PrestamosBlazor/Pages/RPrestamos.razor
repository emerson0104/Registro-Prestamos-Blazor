
@page "/Prestamos"



@using PrestamosBlazor.Models

@using PrestamosBlazor.BLL



@inject IToastService toast





<EditForm Model="prestamo" OnValidSubmit="Guardar">

    <DataAnnotationsValidator />



    <div class="card">



        <div class="card-header">



            <h3>Registro de Prestamos</h3>



        </div>



        <div class="card-body">

            <form>

                <div class="form-row align-items-center">

                    <div class="col">

                        <div class="form-group">

                            <label>ID:</label>

                            <div class="input-group">

                                <InputNumber @bind-Value="prestamo.PrestamoId" class="form-control col-4" />

                                <ValidationMessage For="(() => prestamo.PrestamoId)"></ValidationMessage>

                                <div class="input-group-append">

                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>

                                </div>

                            </div>

                        </div>

                    </div>

                </div>

                @*Fecha*@

                <div class="form-group">

                    <label>FECHA:</label>

                    <InputDate @bind-Value="prestamo.Fecha" class="form-control" />

                    <ValidationMessage For="@(() => prestamo.Fecha)" />

                </div>

                @*Persona*@

                <div class="form-group">

                    <label for="persona_select">PERSONA:</label>

                    <select id="persona_select" @bind="prestamo.PersonaId" class="form-control">

                        <option value="" disabled selected>Elija una Persona</option>

                        @foreach (var item in listaPersona)

                        {

                            <option value="@item.PersonaId">@item.Nombres</option>

                        }

                    </select>

                </div>



                @*Concepto*@

                <div class="form-group">

                    <label>CONCEPTO:</label>

                    <InputText @bind-Value="prestamo.Concepto" class="form-control" />

                    <ValidationMessage For="@(() => prestamo.Concepto)" />

                </div>

                @*Monto*@

                <div class="form-group">

                    <label>MONTO:</label>

                    <InputNumber @bind-Value="prestamo.Monto" step="0.2" @onclick="@MontoABalance" class="form-control" />

                    <ValidationMessage For="@(() => prestamo.Monto)" />

                </div>

                @*Balance*@

                <div class="form-group">

                    <label>BALANCE:</label>

                    <InputNumber @bind-Value="prestamo.Balance" readonly="true" class="form-control" />

                    <ValidationMessage For="@(() => prestamo.Balance)" />

                </div>

            </form>

        </div>

        <div class="card-footer">

            <div class="form-group text-center" display: inline-block>

                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>

                <button type="submit" class="btn btn-lg btn-success">Guardar</button>

                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>

            </div>

        </div>

    </div>

</EditForm>







@code {



        Prestamos prestamo = new Prestamos();



[Parameter]

    public int prestamosId { get; set; }



    private List<Personas> listaPersona = new List<Personas>();





    protected override void OnInitialized()

    {

        Nuevo();

        if (prestamosId > 0)

        {

            var auxPretamo = PrestamosBLL.Buscar(prestamosId);

            if (auxPretamo != null)

                this.prestamo = auxPretamo;

            else

                toast.ShowWarning("No encontrado.");

        }



        listaPersona = PersonasBLL.GetList(p => true);

    }



    private void Buscar()

    {

        var encontrado = PrestamosBLL.Buscar(prestamo.PrestamoId);

        if (encontrado != null)

        {

            this.prestamo = encontrado;

        }

        else

            toast.ShowWarning("No encontrado");



    }





  public void MontoABalance()

    {

        decimal Montos = prestamo.Monto;

        prestamo.Balance = Montos;

    }



    private void Nuevo()

    {

        this.prestamo = new Prestamos();

    }





    private void Guardar()

    {

        bool paso;

        paso = PrestamosBLL.Guardar(prestamo);



        if (paso)

        {

            Nuevo();

            toast.ShowSuccess("Guardado correctamente");

        }

        else

        {

            toast.ShowError("No fue posible guardar");

        }



    }



    private void Eliminar()

    {

        bool elimino;



        elimino = PrestamosBLL.Eliminar(prestamo.PrestamoId);



        if (elimino)

        {

            Nuevo();

            toast.ShowSuccess("Eliminado correctamente");

        }

        else

            toast.ShowError("No fue posible eliminar");

    }
}
